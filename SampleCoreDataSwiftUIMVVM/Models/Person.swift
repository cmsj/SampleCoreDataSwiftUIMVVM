//
//  Person.swift
//  SampleCoreDataSwiftUIMVVM
//
//  Created by Chris Jones on 31/07/2020.
//

import Foundation

public enum VisitReason: String, CaseIterable, Identifiable {
    public var id: VisitReason { self }

    case SummerVacation = "Summer Vacation"
    case Corp = "Corporate"
    case Staff
    case Unknown
}

// The code for Person is generated by Xcode from the Core Data model, but we need to add some extensions
extension Person {
    // In Core Data, the visit reason is stored as a string, but we want it as an enum. This computed property acts as a two way bridge between the two
    var reason: VisitReason {
        get { VisitReason(rawValue: self.reasonStore ?? VisitReason.Unknown.rawValue)! }
        set { self.reasonStore = newValue.rawValue }
    }

    // Turn the days selected in our set of day integers into a string that describes it in human terms, with shortcuts for some combinations
    var daySummary: String {
        get {
            if self.days == Set() {
                return "None"
            }
            if self.days == Set(0..<7) {
                return "Every day"
            }
            if self.days == Set(1..<6) {
                return "Weekdays"
            }

            let dayLabels = DateFormatter().shortStandaloneWeekdaySymbols
            var summaryParts: [String] = []
            for (index, day) in dayLabels!.enumerated() {
                if (self.days != nil) && self.days!.contains(index) {
                    summaryParts.append(day)
                }
            }
            return summaryParts.joined(separator: ", ")
        }
    }

    func hasDay(day: Int) -> Bool {
        return days!.contains(day)
    }

    func toggleDay(day: Int) {
        self.objectWillChange.send()

        if days!.contains(day) {
            days!.remove(day)
        } else {
            days!.insert(day)
        }
    }
}
